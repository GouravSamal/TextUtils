{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","document","body","style","backgroundColor","showAlert","toggleMode","htmlFor","defaultProps","aboutText","TextForm","useState","text","setText","color","heading","value","onChange","event","target","rows","console","log","newText","toUpperCase","toLowerCase","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.40b23607.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\"; \r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navbar = (props) => {\r\n\r\n\r\n    const changeBlue=()=>{\r\n\r\n        if(props.mode==='dark')\r\n        {\r\n            document.body.style.backgroundColor='blue';\r\n            props.showAlert('Blue background active successfully','success')\r\n        }\r\n        else{\r\n            props.showAlert('Blue background is applied only in dark mode','warning')\r\n        }\r\n\r\n    }\r\n\r\n    const changeRed=()=>{\r\n\r\n        if(props.mode==='dark'){\r\n\r\n            document.body.style.backgroundColor='red';\r\n            props.showAlert('Red background active successfully','success')\r\n        }\r\n        else{\r\n            props.showAlert('Red background is applied only in dark mode','warning')\r\n        }\r\n    }\r\n\r\n    const changeGreen=()=>{\r\n\r\n        if(props.mode==='dark'){\r\n\r\n            document.body.style.backgroundColor='green';\r\n            props.showAlert('Green background active successfully','success')\r\n        }\r\n        else{\r\n            props.showAlert('Green background is applied only in dark mode','warning')\r\n        }\r\n\r\n    }\r\n\r\n    const changeYellow=()=>{\r\n\r\n        if(props.mode==='dark'){\r\n\r\n            document.body.style.backgroundColor='yellow';\r\n            props.showAlert('Yellow background active successfully','success')\r\n        }\r\n        else{\r\n            props.showAlert('Yellow background is applied only in dark mode','warning')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\"\r\n                        aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                            </li>\r\n                            \r\n                            {/* <li className=\"nav-item mx-2\"> */}\r\n                                {/* <Link className=\"nav-link mx-2\" to=\"/about\">{props.aboutText}</Link> */}\r\n                                {/* <a className=\"nav-link mx-2\" href=\"/about\">{props.aboutText}</a> */}\r\n                            {/* </li> */}\r\n                        </ul>\r\n                        {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n\r\n                        {/* <div className={`form-check form-switch text-${props.bgcolor}`}> */}\r\n\r\n\r\n                        <div className='mx-3'>\r\n                            <button className=\"btn btn-primary mx-1\" onClick={changeBlue}>Blue</button>\r\n\r\n                            <button className=\"btn btn-warning mx-1\" onClick={changeYellow}>Yellow</button>\r\n\r\n                            <button className=\"btn btn-danger mx-1\" onClick={changeRed}>Red</button>\r\n\r\n                            <button className=\"btn btn-success mx-1\" onClick={changeGreen}>Green</button>\r\n                        </div>\r\n\r\n                        <div className={`form-check form-switch text-${(props.mode==='dark')?'light':'dark'}`}>\r\n                            <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n                    title: PropTypes.string.isRequired,\r\n                    aboutText: PropTypes.string.isRequired  \r\n                 }\r\n\r\n//default props\r\nNavbar.defaultProps={\r\n    title:'Set title here',\r\n    aboutText:'About text here'\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\r\n\r\n\r\nconst TextForm = (props) => {\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const handleClickUpper = () => {\r\n        console.log(\"Uppercase was clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to uppercase successfully','success');\r\n    }\r\n\r\n    const handleClickLower=()=>{\r\n        console.log(\"Lowercase was clicked\");\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to lowercase successfully','success');\r\n    }\r\n\r\n    const handleTextChange = (event) => {\r\n\r\n        setText(event.target.value);\r\n    }\r\n\r\n\r\n    //handle copy words\r\n    const handleCopyWords=()=>{\r\n\r\n        var text=document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n\r\n\r\n    //handle extra spaces\r\n    const handleExtraSpace=()=>{\r\n\r\n        var newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"container\">\r\n\r\n                <h1 style={{color:(props.mode==='dark')?'white':'black'}}>{props.heading}</h1>\r\n\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleTextChange} id=\"myBox\" rows=\"3\" \r\n                    style={{backgroundColor:(props.mode==='dark')?'grey':'white',color:(props.mode==='dark')?'white':'black'}}></textarea>\r\n                </div>\r\n\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleClickUpper}>Convert to Uppercase</button>\r\n            \r\n                <button className=\"btn btn-primary mx-2\" onClick={handleClickLower}>Convert to Lowercase</button>\r\n           \r\n                <button className=\"btn btn-primary mx-2\" onClick={function handleClickClear(){\r\n                        let newText=\"\";\r\n                        setText(newText);\r\n                }}>Clear  Text</button>\r\n\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopyWords}>Copy words</button>\r\n\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpace}>Remove Extra space</button>\r\n\r\n\r\n\r\n            </div>\r\n\r\n            <div className=\"container my-3\">\r\n\r\n                <h1 style={{color:(props.mode==='dark')?'white':'black'}}>Your text summary</h1>\r\n                <p style={{color:(props.mode==='dark')?'white':'black'}}>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p style={{color:(props.mode==='dark')?'white':'black'}}>{0.008 * text.split(\" \").length} Minutes read</p>\r\n                \r\n                <h2 style={{color:(props.mode==='dark')?'white':'black'}}>Preview</h2>\r\n                <p style={{color:(props.mode==='dark')?'white':'black'}}>{(text.length>0)?text:'ENter some text above the textbox to preview something'}</p>\r\n\r\n            </div>\r\n\r\n            <div className=\"container\">\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TextForm;","import React from \"react\";\r\n\r\n\r\nconst Alert = (props) => {\r\n\r\n    const capitalize=(word)=>{\r\n        \r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n\r\n    return (\r\n             props.alert && \r\n        <>\r\n             <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg} \r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Alert;","import React, { useState } from \"react\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router,Route,Switch } from \"react-router-dom\";\n\n\nconst App = () => {\n\n  const [mode, setMode] = useState('light');\n\n  const [bgcolor, setbgColor] = useState('dark')\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000);\n  }\n\n  const toggleMode = () => {\n\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'grey';\n      showAlert('Dark mode is successfully enabled', 'success');\n      document.title = 'TextUtils-Dark Mode';\n      // setbgColor('light')\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode is successfully enabled', 'success')\n      document.title = 'TextUtils-Home';\n      // setbgColor('dark');\n    }\n  }\n\n  return (\n    <>\n\n\n        {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} toggleMode={toggleMode} bgcolor={bgcolor}/> */}\n      {/* <Router> */}\n\n        <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} toggleMode={toggleMode} showAlert={showAlert} />\n\n        <Alert alert={alert} />\n\n        <div className=\"container my-3\">\n\n              <TextForm heading=\"Enter the text to analyze:\" mode={mode} showAlert={showAlert} />\n          {/* <Switch> */}\n\n            {/* <Route exact path='/'> */}\n            {/* </Route> */}\n            \n            {/* <Route exact path='/about'> */}\n              {/* <About /> */}\n            {/* </Route> */}\n            \n\n\n          {/* </Switch> */}\n\n        </div>\n        \n      {/* </Router> */}\n\n      \n          {/* <About/> */}\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}